function tcas_interactive_sim()
    % Interactive 3-D TCAS demo (metric units, TA→RA, no-delay pilot response)
    % Press “p” to pause/resume; use dialog to change velocities when paused.

    clear; clc;
    
    sep0    = input('Initial horizontal separation (m) [e.g. 15000]: ');
    alt1_ft = input('Own-ship altitude (ft) [e.g. 10000]: ');
    alt2_ft = input('Intruder altitude (ft) [e.g. 9500]: ');
    v1_kts  = input('Own-ship speed (knots) [e.g. 200]: ');
    v2_kts  = input('Intruder speed (knots) [e.g. 180]: ');
    
    x1 = 0;   z1 = 0;              y1 = alt1_ft * 0.3048;
    x2 = sep0; z2 = 0;             y2 = alt2_ft * 0.3048;
    v1 = v1_kts * 0.514444;        
    v2 = -v2_kts * 0.514444;       
    
    dt         = 0.1;       
    T_total    = 200;      
    N          = ceil(T_total/dt);
    R_TA       = 5*1852;    % 5 NM in m
    R_RA       = 3*1852;    % 3 NM in m
    Z_THR      = 1000*0.3048;   % 1000 ft in m
    climb_rate = 50;         % m/s climb rate on RA
    
    %% 3. Prepare figure & controls
    fig = figure('Name','TCAS Simulation','NumberTitle','off');
    ax  = axes('Parent',fig); hold(ax,'on'); grid(ax,'on');
    xlabel(ax,'East (m)'); ylabel(ax,'North (m)');
    title(ax,'TCAS: “Traffic” → “Climb/Descend”','FontWeight','bold');
    axis(ax,[-1000 sep0+1000 -2000 2000]); axis equal;
    
    % Plot handles
    h1 = plot(ax,x1,y1,'bo','MarkerFaceColor','b');  % own-ship
    h2 = plot(ax,x2,y2,'ro','MarkerFaceColor','r');  % intruder
    
    % Text labels
    t1 = text(ax,x1,y1,' Own','VerticalAlignment','middle');
    t2 = text(ax,x2,y2,' Intruder','VerticalAlignment','middle');
    
    legend(ax,{'Airplane 1','Airplane 2'},'Location','northeast');
    
    % Pause flag via KeyPressFcn
    set(fig,'KeyPressFcn',@(~,evt) assignin('base','isPaused',strcmp(evt.Key,'p')));
    assignin('base','isPaused',false);
    
    %% 4. State variables and logs
    % State vectors: [x; y; z; vx; vy; vz]
    AC1 = [x1; y1; z1; v1; 0; 0];
    AC2 = [x2; y2; z2; v2; 0; 0];
    pilot_vz = 0;
    tcas_vz  = 0;
    ta_fired = false;
    ra_fired = false;
    
    %% 5. Main simulation loop
    for k = 1:N
        % Pause/resume
        if evalin('base','isPaused')
            answer = inputdlg({...
               'Own-ship vx (m/s):','Own-ship vy (m/s):','Own-ship vz (m/s):', ...
               'Intruder vx (m/s):','Intruder vy (m/s):','Intruder vz (m/s):'}, ...
               'Modify velocities',1, ...
               {num2str(AC1(4)),num2str(AC1(5)),num2str(AC1(6)), ...
                num2str(AC2(4)),num2str(AC2(5)),num2str(AC2(6))});
            if ~isempty(answer)
                AC1(4:6) = str2double(answer(1:3));
                AC2(4:6) = str2double(answer(4:6));
            end
            assignin('base','isPaused',false);
        end
        
        % Update horizontal motion
        AC1(1:2) = AC1(1:2) + AC1(4:5)*dt;
        AC2(1:2) = AC2(1:2) + AC2(4:5)*dt;
        
        % Conflict detection based on current position only (no lookahead)
relPos = AC2(1:3) - AC1(1:3);
horRange = norm(relPos([1 3]));  % Horizontal distance in X-Z plane
vertSep  = abs(relPos(2));       % Y-axis is vertical in your coordinate system

% Trigger avoidance if close horizontally and vertically
if horRange <= 3704 && vertSep <= 1000  % thresholds in meters
    if relPos(2) < 0
        tcas_vz = climb_rate;     % climb if intruder below
    else
        tcas_vz = -climb_rate;    % descend if intruder above
    end
    AC1(5) = tcas_vz;
    AC2(5) = -tcas_vz;
    fprintf('[AVOID] Climb/Descend activated | HorDist: %.1f | VertSep: %.1f\n', horRange, vertSep);
else
    % No advisory needed, maintain vertical velocity
    AC1(5) = 0;
    AC2(5) = 0;
end

              
        % Update vertical motion
        AC1(2) = AC1(2) + AC1(5)*dt;
        AC2(2) = AC2(2) + AC2(5)*dt;
        fprintf('Time %.1fs: Own Alt %.1fm | Intruder Alt %.1fm\n', k*dt, AC1(2), AC2(2));

        % Update plot
        set(h1,'XData',AC1(1),'YData',AC1(2));
        set(h2,'XData',AC2(1),'YData',AC2(2));
        set(t1,'Position',[AC1(1),AC1(2),0]);
        set(t2,'Position',[AC2(1),AC2(2),0]);
        drawnow;
    end
    
    disp('Simulation finished.');
end
